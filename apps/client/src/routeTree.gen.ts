/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AppRouteImport } from "./routes/app";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as AuthIndexRouteImport } from "./routes/auth/index";
import { Route as AppIndexRouteImport } from "./routes/app/index";
import { Route as AppSecurityRouteImport } from "./routes/app/security";
import { Route as AppNotificationsRouteImport } from "./routes/app/notifications";
import { Route as AppSettingsIndexRouteImport } from "./routes/app/settings/index";
import { Route as AppScrapebooksIndexRouteImport } from "./routes/app/scrapebooks/index";

const AppRoute = AppRouteImport.update({
  id: "/app",
  path: "/app",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: "/auth/",
  path: "/auth/",
  getParentRoute: () => rootRouteImport,
} as any);
const AppIndexRoute = AppIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppRoute,
} as any);
const AppSecurityRoute = AppSecurityRouteImport.update({
  id: "/security",
  path: "/security",
  getParentRoute: () => AppRoute,
} as any);
const AppNotificationsRoute = AppNotificationsRouteImport.update({
  id: "/notifications",
  path: "/notifications",
  getParentRoute: () => AppRoute,
} as any);
const AppSettingsIndexRoute = AppSettingsIndexRouteImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => AppRoute,
} as any);
const AppScrapebooksIndexRoute = AppScrapebooksIndexRouteImport.update({
  id: "/scrapebooks/",
  path: "/scrapebooks/",
  getParentRoute: () => AppRoute,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/app": typeof AppRouteWithChildren;
  "/app/notifications": typeof AppNotificationsRoute;
  "/app/security": typeof AppSecurityRoute;
  "/app/": typeof AppIndexRoute;
  "/auth": typeof AuthIndexRoute;
  "/app/scrapebooks": typeof AppScrapebooksIndexRoute;
  "/app/settings": typeof AppSettingsIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/app/notifications": typeof AppNotificationsRoute;
  "/app/security": typeof AppSecurityRoute;
  "/app": typeof AppIndexRoute;
  "/auth": typeof AuthIndexRoute;
  "/app/scrapebooks": typeof AppScrapebooksIndexRoute;
  "/app/settings": typeof AppSettingsIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/app": typeof AppRouteWithChildren;
  "/app/notifications": typeof AppNotificationsRoute;
  "/app/security": typeof AppSecurityRoute;
  "/app/": typeof AppIndexRoute;
  "/auth/": typeof AuthIndexRoute;
  "/app/scrapebooks/": typeof AppScrapebooksIndexRoute;
  "/app/settings/": typeof AppSettingsIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/app"
    | "/app/notifications"
    | "/app/security"
    | "/app/"
    | "/auth"
    | "/app/scrapebooks"
    | "/app/settings";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/app/notifications"
    | "/app/security"
    | "/app"
    | "/auth"
    | "/app/scrapebooks"
    | "/app/settings";
  id:
    | "__root__"
    | "/"
    | "/app"
    | "/app/notifications"
    | "/app/security"
    | "/app/"
    | "/auth/"
    | "/app/scrapebooks/"
    | "/app/settings/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AppRoute: typeof AppRouteWithChildren;
  AuthIndexRoute: typeof AuthIndexRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/app": {
      id: "/app";
      path: "/app";
      fullPath: "/app";
      preLoaderRoute: typeof AppRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/auth/": {
      id: "/auth/";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/app/": {
      id: "/app/";
      path: "/";
      fullPath: "/app/";
      preLoaderRoute: typeof AppIndexRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/app/security": {
      id: "/app/security";
      path: "/security";
      fullPath: "/app/security";
      preLoaderRoute: typeof AppSecurityRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/app/notifications": {
      id: "/app/notifications";
      path: "/notifications";
      fullPath: "/app/notifications";
      preLoaderRoute: typeof AppNotificationsRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/app/settings/": {
      id: "/app/settings/";
      path: "/settings";
      fullPath: "/app/settings";
      preLoaderRoute: typeof AppSettingsIndexRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/app/scrapebooks/": {
      id: "/app/scrapebooks/";
      path: "/scrapebooks";
      fullPath: "/app/scrapebooks";
      preLoaderRoute: typeof AppScrapebooksIndexRouteImport;
      parentRoute: typeof AppRoute;
    };
  }
}

interface AppRouteChildren {
  AppNotificationsRoute: typeof AppNotificationsRoute;
  AppSecurityRoute: typeof AppSecurityRoute;
  AppIndexRoute: typeof AppIndexRoute;
  AppScrapebooksIndexRoute: typeof AppScrapebooksIndexRoute;
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute;
}

const AppRouteChildren: AppRouteChildren = {
  AppNotificationsRoute: AppNotificationsRoute,
  AppSecurityRoute: AppSecurityRoute,
  AppIndexRoute: AppIndexRoute,
  AppScrapebooksIndexRoute: AppScrapebooksIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
